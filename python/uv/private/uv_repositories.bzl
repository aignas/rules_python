# Copyright 2024 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
EXPERIMENTAL: This is experimental and may be removed without notice

Create repositories for uv toolchain dependencies
"""

UV_BUILD_TMPL = """\
# Generated by repositories.bzl
load("@rules_python//python/uv:uv_toolchain.bzl", "uv_toolchain")

uv_toolchain(
    name = "uv_toolchain",
    uv = "{binary}",
    version = "{version}",
)
"""

def _uv_repo_impl(repository_ctx):
    platform = repository_ctx.attr.platform

    is_windows = "windows" in platform
    _, _, filename = repository_ctx.attr.urls[0].rpartition("/")
    if filename.endswith(".tar.gz"):
        strip_prefix = filename[:-len(".tar.gz")]
    else:
        strip_prefix = ""

    result = repository_ctx.download_and_extract(
        url = repository_ctx.attr.urls,
        sha256 = repository_ctx.attr.sha256,
        stripPrefix = strip_prefix,
    )

    binary = "uv.exe" if is_windows else "uv"
    repository_ctx.file(
        "BUILD.bazel",
        UV_BUILD_TMPL.format(
            binary = binary,
            version = repository_ctx.attr.version,
        ),
    )

    return {
        "name": repository_ctx.attr.name,
        "platform": repository_ctx.attr.platform,
        "sha256": result.sha256,
        "urls": repository_ctx.attr.urls,
        "version": repository_ctx.attr.version,
    }

_uv_repository = repository_rule(
    _uv_repo_impl,
    doc = "Fetch external tools needed for uv toolchain",
    attrs = {
        "platform": attr.string(mandatory = True),
        "sha256": attr.string(mandatory = False),
        "urls": attr.string_list(mandatory = True),
        "version": attr.string(mandatory = True),
    },
)

def uv_repositories(*, name, version, platforms, urls, uv_repository = None):
    """Convenience macro which does typical toolchain setup

    Skip this macro if you need more control over the toolchain setup.

    Args:
        name: The name of the toolchains repo,
        version: The uv toolchain version to download.
        platforms: The platforms to register uv for.
        urls: The urls with sha256 values to register uv for.
        uv_repository: The rule function for creating a uv_repository.

    Returns:
        A struct with names, labels and platforms that were created for this invocation.
    """
    uv_repository = uv_repository or _uv_repository
    if not version:
        fail("version is required")

    toolchain_names = []
    toolchain_labels_by_toolchain = {}
    platform_names_by_toolchain = {}

    for platform in platforms:
        uv_repository_name = "{}_{}_{}".format(name, version.replace(".", "_"), platform.lower().replace("-", "_"))
        uv_repository(
            name = uv_repository_name,
            version = version,
            platform = platform,
            urls = urls[platform].urls,
            sha256 = urls[platform].sha256,
        )

        toolchain_name = uv_repository_name + "_toolchain"
        toolchain_names.append(toolchain_name)
        toolchain_labels_by_toolchain[toolchain_name] = "@{}//:uv_toolchain".format(uv_repository_name)
        platform_names_by_toolchain[toolchain_name] = platform

    return struct(
        names = toolchain_names,
        labels = toolchain_labels_by_toolchain,
        platforms = platform_names_by_toolchain,
    )
